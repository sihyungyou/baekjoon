/*
문제 설명
사이버 코딩 대학(Cyber Coding University)에서는 매 학기마다 학생들의 코딩 시험 점수에 따라 학점을 부여합니다. 코딩대학은 학점에 관하여 아래와 같은 학칙을 시행하고 있습니다.

A학점을 받는 학생은 전체 학생의 30%를 초과할 수 없습니다.
A학점과 B학점을 받는 학생의 합은 전체 학생의 70%를 초과할 수 없습니다.
A학점 또는 B학점을 받지 못한 학생에게는 모두 C학점을 부여합니다.
A, B, C학점은 다시 A+/A-/B+/B-/C+/C- 6단계로 세분화하여 학생들에게 부여해야 합니다.
+학점과 -학점을 나누는 것은 교수 재량입니다.
사이버 코딩 대학의 교수인 당신은, 학칙과 함께 아래와 같은 기준을 세우고 학생들에게 학점을 부여하기로 했습니다.

시험 성적순으로 A학점을 최대한 많이 주고, 나머지 학생들에게 B학점도 최대한 많이 줍니다.
학점 별로 학생들의 성적을 내림차순으로 정렬했을 때, 점수 차이가 가장 크게 나는 곳을 경계로 +/-학점을 구분합니다.

2-1. 점수 차이가 가장 크게 나는 곳이 여러 곳이면, 학생들에게 +학점을 가장 많이 줄 수 있는 곳을 경계로 +/-학점을 구분합니다.
2-2. A/B/C 각 학점을 받는 학생이 1명뿐이라면, +학점을 부여합니다.
2-3. A/B/C 각 학점을 받는 학생이 2명 이상이라면, +학점과 -학점을 받는 학생이 각각 1명 이상씩 되도록 학점을 부여합니다.

학점의 경계부분에 동점인 학생들이 여러 명 있다면, 출석번호가 빠른 학생이 더 높은 학점을 받습니다.

학생들의 시험 성적이 주어질 때, 학생들이 가장 많이 받게 될 학점과 가장 적게 받게 될 학점은 각각 몇 명인지 출력하세요.

제한사항
입력 :

표준 입력을 사용해 데이터를 입력 받으세요.
테스트 케이스 첫째 줄에는 학생의 수 n이 주어집니다.
n은 4 이상 100,000 이하인 자연수입니다.
테스트 케이스 둘째 줄에 학생들의 시험 점수 n개가 순서대로 주어집니다.
학생들의 시험 점수는 출석번호 순으로 주어집니다. 즉, 처음 숫자가 출석번호 1번 학생의 점수이며, 마지막 점수가 출석번호 n번 학생의 점수입니다.
학생들의 시험 점수는 0 이상 10,000,000 이하인 정수입니다.
출력 :

표준 출력을 사용해 정답을 출력해주세요.
학생들이 가장 많이 받게 될 학점과 적게 받게 될 학점의 인원 수를 하나의 공백으로 구분하여 차례대로 출력하세요.
입출력 예
입력 #1

24
81 65 65 65 76 64 65 65 73 70 68 67 90 66 66 89 65 65 88 73 73 83 66 65 
출력 #2

7 1
입력 #2

6
1055 1055 1055 1055 1055 1055
출력 #2

2 0
입출력 예 설명
입출력 예 #1

점수	90	89	88	83	81	76	73
학점	A+	A+	A+	A+	A+	A-	A-
점수	73	73	70	68	67	66	66	66	65
학점	B+	B+	B-	B-	B-	B-	B-	B-	B-
점수	65	65	65	65	65	65	65	64
학점	C+	C+	C+	C+	C+	C+	C+	C-
학생 수가 24명이므로, 7명에게 A학점을 줍니다(24 X 0.3 = 7.2).
A/B학점은 16명까지 줄 수 있으므로, A학점 7명을 제외한 9명에게 B학점을 줍니다.(24 X 0.7 = 16.8)
사람은 소수점 단위로 셀 수 없으므로 소수점 이하는 버리는 것에 유의합니다.
A학점을 받은 학생들을 살펴보면, 88점-83점, 81점-76점 차이가 5점이므로, 두 곳 중에서 한 곳을 +/ -학점의 경계로 선택해야 합니다. 이 때, 81점-76점을 경계로 선택해야 +학점을 최대한 많이 줄 수 있습니다.
B학점을 받은 학생들을 살펴보면, 73점-70점 차이가 3점이므로, 이 곳을 경계로 +/-학점을 줍니다.
C학점을 받은 학생들을 살펴보면, 65점-64점 차이가 1점이므로, 이곳을 경계로 +/-학점을 줍니다.
B-학점(혹은 C+학점)을 받은 학생이 7명으로 최대입니다. 따라서, 7을 출력합니다.
C-학점을 받은 학생이 1명으로 최소입니다. 따라서, 1을 출력합니다.
입출력 예 #2

점수	1055	1055	1055	1055	1055	1055
학점	A+	B+	B+	B-	C+	C-
학생 수가 6명이므로, 1명에게 A학점을 줍니다.(6 X 0.3 = 1.8)
A/B학점은 4명까지 줄 수 있으므로, A학점 1명을 제외한 3명에게 B학점을 줍니다.(6 X 0.7 = 4.2)
A학점을 받은 학생은 한 명이므로, A+ 학점을 줍니다.
B학점을 받은 3명 학생들 사이의 점수 차이는 모두 0점입니다. 최대한 +학점을 많이 주기 위하여, 뒤 쪽에 위치한 두 명을 경계로 하여 +/-학점을 나눕니다.
C학점을 받은 학생은 2명이므로, +/-학점을 하나씩 줍니다.
B+학점을 받은 학생이 2명으로 최대입니다. 따라서, 2를 출력합니다.
A-학점을 받은 학생이 0명으로 최소입니다. 따라서, 0을 출력합니다.
*/
// #include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

using namespace std;

bool desc(pair<int, int> a, pair<int, int> b) {
    return a.first > b.first;
}
int main(void) {
    int n, i, diff, idx, temp, A, AP, AM, B, BP, BM, C, CP, CM;
    vector<pair<int, int> > v;
    vector<int> ans;
    cin >> n;
    
    A = n * 0.3;
    B = n * 0.7 - A;
    C = n - (A+B);
    // printf("A : %d, B : %d, C : %d\n", A, B, C);

    for (i = 0; i < n; i++) {
        cin >> temp;
        v.push_back(make_pair(temp, i+1));
    }
    
    diff = 0;
    
    sort(v.begin(), v.end(), desc);
    
    for (i = 0; i < A; i++) {
        if ( (v[i].first - v[i+1].first) >= diff) {
            diff = v[i].first - v[i+1].first;
            idx = i;
        }
        // printf("diff : %d, idx : %d\n",diff, idx);
        // printf("v[%d].first : %d, v[%d].second : %d\n",i, v[i].first, i+1, v[i+1].first);
    }
    AP = idx+1;
    AM = A - AP;

    diff = 0;
    
    for (i = A+1; i < A+B-1; i++) {
        if ( (v[i].first - v[i+1].first) >= diff) {
            diff = v[i].first - v[i+1].first;
            idx = i;
        }
    }
    
    BP = idx-A+1;
    BM = B-BP;

    diff = 0;
    

    for (i = A+B; i < v.size()-1; i++) {
        if ( (v[i].first - v[i+1].first) >= diff) {
            diff = v[i].first - v[i+1].first;
            idx = i;
        }
    }
    
    CP = idx - A - B + 1;
    CM = C - CP;


    ans.push_back(AP);
    ans.push_back(AM);
    ans.push_back(BP);
    ans.push_back(BM);
    ans.push_back(CP);
    ans.push_back(CM);


    sort(ans.begin(), ans.end());

    printf("%d %d\n", ans[5], ans[0]);
    
    return 0;
}